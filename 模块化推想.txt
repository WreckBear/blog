想象一下，我们要实现一个功能需要一大堆代码，而这写代码最终都会转换成CPU指令，被CPU逐条执行。
猜想一下，最早的程序是把所有的指令写到一个地方，可能几万行，后来，coder觉得这个写有两个坏处：1.有些地方代码重复出现2.太难读了。所以coder觉得可以用分治原则，将重复的代码独立成一部分，用一段特殊标记标记出来，再想办法可以让别的地方调用，这是最早的模块，即函数即模块。
然后将一个文件中的所有的指令整理成函数模块的形式，解决了重复出现的问题，但其实还是有点难读，因为即使分成函数模块，代码也很多，那就再分，再升一个等级，就叫功能模块，把那些功能相近的函数分别抽取出来，整理成功能模块，这样就舒服多了。

其实模块承担了的功能从上面就可以看出来：
1.模块内部自成一家，对外具有隐藏内部的特性
2.模块不是软件，需要和别的模块协同，势必要沟通，所以要对外部暴露的必要接口。

函数模块是怎么做到这两点的呢？
函数内部实现，调用者是不知情的，但访问函数模块会返回一定的数据。

功能模块是怎么做到这两点的呢？
既然功能模块是函数模块的上级，那么访问功能模块暴露的应该就是函数模块。

其实很多语言都会以文件作为模块，

代码的庞大势必引发隔离，
1.函数即是一种，函数将一部分代码从庞大集中的代码中分离开来，作为一个单元
2.再就是文件，文件也作为隔离
3.包，也算隔离
4.模块，也算隔离


模块：对外具有隐蔽性和暴露点

JAVA的隐蔽性体现在四个权限控制符